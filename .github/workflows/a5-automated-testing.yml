name: A5 Automated Testing with Coverage & Notifications

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  # === üèóÔ∏è Build Job ===
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build project
        run: |
          echo "üèóÔ∏è Simulating build process..."
          mkdir build
          echo "Build completed at $(date)" > build/info.txt
          zip -r build.zip build
          echo "‚úÖ Build artifact created."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # === üß™ Unit Test Job ===
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage
      - name: Check coverage threshold
        run: |
          COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage below 80% threshold"
            exit 1
          fi
          echo "‚úÖ Coverage above threshold"

  # === üîó Integration Test Job ===
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run integration tests
        run: npm run test:integration -- --coverage

  # === üè∑Ô∏è Auto Version Job ===
  auto-version:
    runs-on: ubuntu-latest
    needs: test-integration
    outputs:
      version: ${{ steps.setver.outputs.version }}
      note: ${{ steps.note.outputs.note }}
    steps:
      - uses: actions/checkout@v4

      - name: Get previous tag
        id: get_prev
        run: |
          prev=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Previous version: $prev"
          echo "prev=$prev" >> $GITHUB_ENV

      - name: Determine new version
        id: setver
        run: |
          prev=${{ env.prev }}
          major=$(echo $prev | cut -d. -f1 | tr -d 'v')
          minor=$(echo $prev | cut -d. -f2)
          patch=$(echo $prev | cut -d. -f3)
          msg=$(git log -1 --pretty=%B)

          if [[ $msg == *"#major"* ]]; then
            major=$((major+1)); minor=0; patch=0
          elif [[ $msg == *"#minor"* ]]; then
            minor=$((minor+1)); patch=0
          elif [[ $msg == *"#patch"* ]]; then
            patch=$((patch+1))
          fi

          new="v${major}.${minor}.${patch}"
          echo "New version: $new"
          echo "version=$new" >> $GITHUB_OUTPUT

      - name: Generate release note
        id: note
        run: |
          msg=$(git log -1 --pretty=%B)
          safe_msg=$(echo "$msg" | sed 's/%/%25/g; s/\r/%0D/g; s/\n/%0A/g')
          echo "note=$safe_msg" >> $GITHUB_OUTPUT
          echo "Release note: $msg"

  # === üöÄ Deploy to Staging ===
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [auto-version, test-integration]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Deploy to Staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.auto-version.outputs.version }}
          NOTE: ${{ needs.auto-version.outputs.note }}
        run: |
          echo "üöÄ Deploying to Staging..."
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "‚ö†Ô∏è Release already exists."
          echo "‚úÖ Staging release $TAG created successfully."

  # === üöÄ Deploy to Production ===
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Deploy to Production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.auto-version.outputs.version }}
          NOTE: ${{ needs.auto-version.outputs.note }}
        run: |
          echo "üöÄ Deploying to Production..."
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "‚ö†Ô∏è Release already exists."
          echo "‚úÖ Production release $TAG created successfully."

  # === ‚ö†Ô∏è Notify on Failure ===
  notify-on-fail:
    runs-on: ubuntu-latest
    needs: [build, test-unit, test-integration, auto-version, deploy-staging, deploy-production]
    if: ${{ failure() }}
    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Create Issue on Failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create --title "‚ùå CI/CD Pipeline Failed (Run #${{ github.run_number }})" \
            --body "A job failed during automated testing or deployment. Please review logs in Actions."
