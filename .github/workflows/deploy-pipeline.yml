name: Multi-Stage Deployment Pipeline

on:
  workflow_dispatch:   # ÊâãÂãïËß∏ÁôºÈÅøÂÖçËá™ÂãïË∑ë‰∏âÊ¨°

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          echo "üèóÔ∏è Simulating build process..."
          mkdir build
          echo "Build completed at $(date)" > build/info.txt
          zip -r build.zip build
          echo "‚úÖ Build artifact created."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  auto-version:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ steps.setver.outputs.version }}
      note: ${{ steps.note.outputs.note }}
    steps:
      - uses: actions/checkout@v4

      - name: Get previous tag
        id: get_prev
        run: |
          prev=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Previous version: $prev"
          echo "prev=$prev" >> $GITHUB_ENV

      - name: Determine new version
        id: setver
        run: |
          prev=${{ env.prev }}
          major=$(echo $prev | cut -d. -f1 | tr -d 'v')
          minor=$(echo $prev | cut -d. -f2)
          patch=$(echo $prev | cut -d. -f3)
          msg=$(git log -1 --pretty=%B)

          if [[ $msg == *"#major"* ]]; then
            major=$((major+1)); minor=0; patch=0
          elif [[ $msg == *"#minor"* ]]; then
            minor=$((minor+1)); patch=0
          elif [[ $msg == *"#patch"* ]]; then
            patch=$((patch+1))
          fi

          new="v${major}.${minor}.${patch}"
          echo "New version: $new"
          echo "version=$new" >> $GITHUB_OUTPUT

      - name: Generate release note
        id: note
        run: |
          msg=$(git log -1 --pretty=%B)
          echo "note=${msg}" >> $GITHUB_OUTPUT
          echo "Release note: $msg"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: auto-version
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Deploy to Staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.auto-version.outputs.version }}
          NOTE: ${{ needs.auto-version.outputs.note }}
        run: |
          echo "üöÄ Deploying to Staging..."
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "‚ö†Ô∏è Release already exists."
          echo "‚úÖ Staging release $TAG created successfully."

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Deploy to Production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.auto-version.outputs.version }}
          NOTE: ${{ needs.auto-version.outputs.note }}
        run: |
          echo "üöÄ Deploying to Production..."
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "‚ö†Ô∏è Release already exists."
          echo "‚úÖ Production release $TAG created successfully."
